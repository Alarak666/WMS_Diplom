@using WMS.Core.Services.Framework
@using WMS.Core.DTO.EmployeeDtos
@inject NavigationManager NavigationManager
@inject TabPageService TabPageService

<div class="card w-100">
    <div class="card-body p-0">
        <DxMenu Orientation="Orientation.Horizontal"
                DropDownActionMode="MenuDropDownActionMode.Click"
                DisplayMode="MenuDisplayMode.Desktop"
                Title="WMS"
                CollapseItemsToHamburgerMenu="true"
                CollapseItemToIconMode="MenuCollapseItemToIconMode.All">
            <TitleTemplate>
                <div class="">
                    WMS
                </div>
            </TitleTemplate>
            <Items>
                @* Country
                Currency
                Order
                Product

                Unit
                VendorCustomer*@
                <DxMenuItem Text="Sales" IconCssClass="oi oi-person">
                    <Items>
                        <DxMenuItem Text="Country" Click="@(() => NavigationManager.NavigateTo("/countries"))" />
                        <DxMenuItem Text="Currency" Click="@(() => NavigationManager.NavigateTo("/currencies"))" />
                        <DxMenuItem Text="Order" Click="@(() => NavigationManager.NavigateTo("/orders"))" />
                    </Items>
                </DxMenuItem>
                <DxMenuItem Text="Identity" IconCssClass="oi oi-person">
                    <Items>
                        <DxMenuItem Text="Application User" Click="@(() => NavigationManager.NavigateTo("/application-users"))" />
                        <DxMenuItem Text="Application Role" Click="@(() => NavigationManager.NavigateTo("/application-roles"))" />
                        <DxMenuItem Text="Application User Setting" Click="@(() => NavigationManager.NavigateTo("/application-user-settings"))" />
                    </Items>
                </DxMenuItem>
                <DxMenuItem Text="HR" IconCssClass="oi oi-person">
                    <Items >
                        <DxMenuItem IconCssClass="icon-employee" Text="Employee" Click="@(() => NavigationManager.NavigateTo("/employees"))" CssClass="menu-separator menu-item" />
                        <DxMenuItem IconCssClass="icon-person"  Text="Person" Click="@(() => NavigationManager.NavigateTo("/persons"))" CssClass="menu-separator menu-item" />
                        <DxMenuItem Text="VendorCustomer" Click="@(() => NavigationManager.NavigateTo("/vendor-customers"))" CssClass="menu-separator menu-item" />
                        <DxMenuItem Text="Division" Click="@(() => NavigationManager.NavigateTo("/divisions"))" CssClass="menu-separator menu-item" />
                        <DxMenuItem Text="Position" Click="@(() => NavigationManager.NavigateTo("/positions"))" CssClass="menu-separator menu-item" />
                    </Items>
                </DxMenuItem>
                <DxMenuItem Text="Warehouse" IconCssClass="oi oi-layers">
                    <Items>
                        <DxMenuItem Text="Acceptance Of Good" Click="@(() => NavigationManager.NavigateTo("/acceptance-of-goods"))" />
                        <DxMenuItem Text="Area Type" Click="@(() => NavigationManager.NavigateTo("/area-types"))" />
                        <DxMenuItem Text="Region" Click="@(() => NavigationManager.NavigateTo("/regions"))" />
                        <DxMenuItem Text="Pallet" Click="@(() => NavigationManager.NavigateTo("/pallets"))" />
                        <DxMenuItem Text="Place Parameter" Click="@(() => NavigationManager.NavigateTo("/place-parameters"))" />
                    </Items>
                </DxMenuItem>
                <DxMenuItem CssClass="search-menu-item" BeginGroup="true" Position="ItemPosition.End">
                    <Template>
                        <SearchItem />
                    </Template>
                </DxMenuItem>
                <DxMenuItem CssClass="notoggle" Position="ItemPosition.End">
                    <TextTemplate>
                        @*<div class="menu-icon-user-profile menu-icon" />*@
                        <i class="fa-solid fa-user"></i>
                    </TextTemplate>
                    <SubMenuTemplate>
                        <div class="w-100 user-profile">
                            <div class="flex-column align-items-center justify-content-center">
                                <div class="logo-container d-flex align-items-center justify-content-center">
                                    @* <div class="menu-icon-user-profile menu-icon menu-icon-large"/> *@
                                    <div class="border d-flex justify-content-center align-items-center"
                                         alt="Avatar">
                                        <img src="images/empty_avatar.png" style="width:70px; height: 70px" />
                                    </div>
                                </div>
                                <div class="user-name-container bm-3 mb-2">
                                    <div class="tm-8 text-center">User Name</div>
                                    <div class="text-center">@_userName</div>
                                </div>
                                <div class="text-center py-3">
                                    <a href="/user-settings" class="link-info">My settings</a>
                                </div>
                                <div class="d-flex justify-content-center log-off-btn">
                                    <form method="post" action="/identity/account/logout">
                                        <button class="btn btn-secondary" type="submit">Log Off</button>
                                    </form>
                                    @*<DxButton Text="Log Off" RenderStyle="@ButtonRenderStyle.Secondary" Click="@(() => NavigationManager.NavigateTo("/identity/account/logout"))"></DxButton>*@
                                </div>
                            </div>
                        </div>
                    </SubMenuTemplate>
                </DxMenuItem>
            </Items>
        </DxMenu>
    </div>
</div>

@code {

    [Inject]
    public IAppFramework AppFramework { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private string? _userName;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //TODO авторизация
        //var user = (await AuthState).User;
        //if (user?.Identity?.IsAuthenticated ?? false)
        //{
        //    _userName = user.Identity.Name;
        //}
    }

    private void HandleOpenNewTab(Type type)
    {
        var appEntity = AppFramework.GetEntity(type);
        if (appEntity is null)
        {
            throw new Exception("Framework: Entity description not found!");
        }

        var existingTab = TabPageService.TabComponents.FirstOrDefault(x => x.ComponentType == appEntity.ListView.ViewComponent);
        if (existingTab is null)
        {
            if (appEntity?.ListView is not null)
            {
                TabPageService?.AddTabPage(new TabPageDescription()
                    {
                        ComponentType = appEntity.ListView.ViewComponent,
                        ComponentTitle = appEntity.ListView?.Title
                    });
            }
        }
        else
        {
            TabPageService.SetCurrentIndex(TabPageService.TabComponents.IndexOf(existingTab));
            StateHasChanged();
        }
    }

    private void HandleOpenCustomNewTab(Type type, string title)
    {
        var existingTab = TabPageService.TabComponents.FirstOrDefault(x => x.ComponentType == type);
        if (existingTab is null)
        {
            TabPageService?.AddTabPage(new TabPageDescription()
                {
                    ComponentType = type,
                    ComponentTitle = title
                });
        }
        else
        {
            TabPageService.SetCurrentIndex(TabPageService.TabComponents.IndexOf(existingTab));
            StateHasChanged();
        }
    }

}