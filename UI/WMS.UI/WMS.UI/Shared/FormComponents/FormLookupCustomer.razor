@*@using WMS.Core.Entities.Catalogs.VendorCustomerCatalog
@using WMS.Core.Entities.Catalogs.CompanyCatalog
@using WMS.Core.Services.Catalogs.VendorCustomers
@using WMS.UI.Pages.Catalogs.VendorCustomers
<FormLookupCatalog SelectedItemId="SelectedItemId"
                   SelectedItemIdChanged="SelectedItemIdChanged"
                   ReadOnly="ReadOnly"
                   Enabled="Enabled"
                   TItem="VendorCustomer"
                   DetailViewType="typeof(VendorCustomerDetailViewForm)"
                   PrepareNewObjectParams="PrepareNewObjectParams"
                   IsValid="IsValid"
                   ServerData="HandleLoadCustomers"
                   ShowCreateButton="true" 
                   ShowEditButton="true">
    <Columns>
        <FormLookupCatalogColumn Item="context" Caption="Name" Name="@nameof(Company.Name)" />
        <FormLookupCatalogColumn Item="context" Caption="TIN" Name="@nameof(Company.Tin)" />
    </Columns>
</FormLookupCatalog>

@code {
    [Parameter]
    public bool ReadOnly { get; set; } = false;
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public bool? IsValid { get; set; }
    [Parameter]
    public Guid? SelectedItemId { get; set; }
    [Parameter]
    public EventCallback<Guid?> SelectedItemIdChanged { get; set; }
    [Inject]
    public IVendorCustomerService VendorCustomerService { get; set; }
    [Parameter] public Func<Task<Dictionary<string, object?>>>? PrepareNewObjectParams { get; set; }

    private async Task<IEnumerable<VendorCustomer>> HandleLoadCustomers(string? searchText)
    {
        return await VendorCustomerService.GetOnlyCustomers(searchText);
    }

}*@