@using WMS.Core.Models.Dashboards
@using WMS.Core.Services.Dashboards
@using WMS.Core.Extensions
<div class="card">
    <div class="card-header">
        Sales/Purchases
    </div>
    <div class="card-body">
        <DxPieChart Data="@salesData"
                    Diameter="diameter"
                    InnerDiameter="innerDiameter"
                    T="DashboardSaleTurnoverItem">
            <DxPieChartSeries T="DashboardSaleTurnoverItem"
                              TArgument="string"
                              TValue="decimal"
                              ValueField="si => si.Amount"
                              ArgumentField="si => si.CustomerName"
                              SummaryMethod="Enumerable.Sum">
                <DxChartSeriesLabel Visible="showLabels"
                                    Position="labelPosition"
                                    Format="ChartElementFormat.Thousands(1)">
                    <DxChartSeriesLabelConnector Visible="true"/>
                </DxChartSeriesLabel>
            </DxPieChartSeries>
            <DxChartTooltip Enabled="true"
                            Position="RelativePosition.Outside">
                <div style="margin: 0.75rem">
                    <div class="fw-bold">@context.Point.Argument</div>
                    <div>Sales: @($"{context.Point.Value:#,0.}")</div>
                </div>
            </DxChartTooltip>
            <DxChartTitle Text="Sales by Customer">
                <DxChartSubTitle Text="GEL"/>
            </DxChartTitle>
            <DxChartLegend HorizontalAlignment="HorizontalAlignment.Center"
                           VerticalAlignment="VerticalEdge.Bottom"
                           Position="RelativePosition.Outside"
                           Orientation="Orientation.Horizontal"/>
        </DxPieChart>
       
    </div>
</div>

@code {
    IEnumerable<DashboardSaleTurnoverItem> salesData;

    [Parameter]
    public bool ShowSeriesPointMarkers { get; set; }

    [Parameter]
    public bool ShowSeriesLabels { get; set; }

    [Inject]
    public ISalePurchaseCardService SalePurchaseCardService { get; set; }
    double? diameter = null;
    double innerDiameter = 0.5;
    bool showLabels = true;
    RelativePosition labelPosition = RelativePosition.Outside;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        salesData = await SalePurchaseCardService.GetData(System.DateTime.Now.StartOfMonth().AddMonths(-1), System.DateTime.Now.EndOfMonth().AddMonths(1));
    }

}