// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS.Data.Context;

#nullable disable

namespace WMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.BaseClass.BaseCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("BaseCatalogs", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationRoles", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUsers", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.ApplicationUserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentLocale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("ApplicationUserSettings", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.UserActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserActivities", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Notifications.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MarkedAsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserMessages", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Countries.Country", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Currencies.Currency", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<string>("SymbolCode")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Divisions.Division", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<Guid?>("ParentDivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ParentDivisionId");

                    b.ToTable("Divisions", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Employees.Employee", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VendorCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DivisionId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId");

                    b.HasIndex("VendorCustomerId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Orders.Order", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<DateTime>("DateOrders")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VendorCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VendorCustomerId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Orders.OrderDetail", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Persons.Person", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<string>("ActualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailValidPerson")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Positions.Position", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<DateTime>("DateOfApproval")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MainSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PositionApproved")
                        .HasColumnType("bit");

                    b.HasIndex("DivisionId");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Products.Product", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Import")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ImportPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<Guid?>("MainUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VatRate")
                        .HasColumnType("int");

                    b.Property<string>("VendorCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GroupId");

                    b.HasIndex("MainUnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.AcceptanceOfGood", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<DateTime?>("DataExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAccepts")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("NPallet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TypePalletId");

                    b.ToTable("AcceptanceOfGoods", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.AreaType", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<int>("AvailablePlace")
                        .HasColumnType("int");

                    b.Property<Guid?>("IncludeAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxPlace")
                        .HasColumnType("int");

                    b.Property<int>("RackQty")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TermMax")
                        .HasColumnType("int");

                    b.HasIndex("IncludeAreaId");

                    b.HasIndex("RegionId");

                    b.ToTable("AreaTypes", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.Pallet", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<Guid?>("AreaTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasIndex("AreaTypeId");

                    b.ToTable("Pallets", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.PlaceParameter", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<Guid?>("PalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasIndex("PalletId");

                    b.ToTable("PlaceParameters", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.Region", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.Units.Unit", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("WMS.Data.Entity.VendorCustomers.VendorCustomer", b =>
                {
                    b.HasBaseType("WMS.Data.Entity.BaseClass.BaseCatalog");

                    b.Property<string>("ActualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Additional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailValidVendorCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForeigner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVendor")
                        .HasColumnType("bit");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CountryId");

                    b.ToTable("VendorCustomers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Data.Entity.BaseClass.BaseCatalog", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.ApplicationUserSetting", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", "ApplicationUser")
                        .WithOne("UserSettings")
                        .HasForeignKey("WMS.Data.Entity.Identity.ApplicationUserSetting", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.UserActivity", b =>
                {
                    b.HasOne("WMS.Data.Entity.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Activities")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WMS.Data.Entity.Countries.Country", b =>
                {
                    b.HasOne("WMS.Data.Entity.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Countries.Country", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WMS.Data.Entity.Currencies.Currency", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Currencies.Currency", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Data.Entity.Divisions.Division", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Divisions.Division", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Divisions.Division", "ParentDivision")
                        .WithMany()
                        .HasForeignKey("ParentDivisionId");

                    b.Navigation("ParentDivision");
                });

            modelBuilder.Entity("WMS.Data.Entity.Employees.Employee", b =>
                {
                    b.HasOne("WMS.Data.Entity.Divisions.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Employees.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("WMS.Data.Entity.Positions.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("WMS.Data.Entity.VendorCustomers.VendorCustomer", "VendorCustomer")
                        .WithMany()
                        .HasForeignKey("VendorCustomerId");

                    b.Navigation("Division");

                    b.Navigation("Person");

                    b.Navigation("Position");

                    b.Navigation("VendorCustomer");
                });

            modelBuilder.Entity("WMS.Data.Entity.Orders.Order", b =>
                {
                    b.HasOne("WMS.Data.Entity.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Orders.Order", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.VendorCustomers.VendorCustomer", "VendorCustomer")
                        .WithMany()
                        .HasForeignKey("VendorCustomerId");

                    b.Navigation("Employee");

                    b.Navigation("VendorCustomer");
                });

            modelBuilder.Entity("WMS.Data.Entity.Orders.OrderDetail", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Orders.OrderDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Orders.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WMS.Data.Entity.Persons.Person", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Persons.Person", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Data.Entity.Positions.Position", b =>
                {
                    b.HasOne("WMS.Data.Entity.Divisions.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Positions.Position", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("WMS.Data.Entity.Products.Product", b =>
                {
                    b.HasOne("WMS.Data.Entity.Products.Product", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Products.Product", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Units.Unit", "MainUnit")
                        .WithMany()
                        .HasForeignKey("MainUnitId");

                    b.HasOne("WMS.Data.Entity.Units.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Group");

                    b.Navigation("MainUnit");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.AcceptanceOfGood", b =>
                {
                    b.HasOne("WMS.Data.Entity.Employees.Employee", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Stocks.AcceptanceOfGood", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WMS.Data.Entity.Stocks.Pallet", "TypePallet")
                        .WithMany()
                        .HasForeignKey("TypePalletId");

                    b.Navigation("Employer");

                    b.Navigation("Product");

                    b.Navigation("TypePallet");
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.AreaType", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Stocks.AreaType", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Stocks.AreaType", "IncludeArea")
                        .WithMany()
                        .HasForeignKey("IncludeAreaId");

                    b.HasOne("WMS.Data.Entity.Stocks.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("IncludeArea");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.Pallet", b =>
                {
                    b.HasOne("WMS.Data.Entity.Stocks.AreaType", "AreaType")
                        .WithMany()
                        .HasForeignKey("AreaTypeId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Stocks.Pallet", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AreaType");
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.PlaceParameter", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Stocks.PlaceParameter", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WMS.Data.Entity.Stocks.Pallet", "Pallet")
                        .WithMany()
                        .HasForeignKey("PalletId");

                    b.Navigation("Pallet");
                });

            modelBuilder.Entity("WMS.Data.Entity.Stocks.Region", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Stocks.Region", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Data.Entity.Units.Unit", b =>
                {
                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.Units.Unit", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Data.Entity.VendorCustomers.VendorCustomer", b =>
                {
                    b.HasOne("WMS.Data.Entity.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("WMS.Data.Entity.BaseClass.BaseCatalog", null)
                        .WithOne()
                        .HasForeignKey("WMS.Data.Entity.VendorCustomers.VendorCustomer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WMS.Data.Entity.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("WMS.Data.Entity.Orders.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
